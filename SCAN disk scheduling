#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100

int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int main() {
    int requests[MAX_REQUESTS], numRequests;
    int head, diskSize, direction, totalMovement = 0;

    printf("Enter total number of disk requests: ");
    scanf("%d", &numRequests);

    printf("Enter the disk requests (track numbers): ");
    for (int i = 0; i < numRequests; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter initial head position: ");
    scanf("%d", &head);

    printf("Enter total disk size (max track number): ");
    scanf("%d", &diskSize);

    printf("Enter initial head direction (0 for towards 0, 1 for towards max track): ");
    scanf("%d", &direction);

    requests[numRequests] = head;  // Include head for sorting
    numRequests++;

    qsort(requests, numRequests, sizeof(int), compare);

    // Find index of head position in sorted array
    int index = 0;
    for (int i = 0; i < numRequests; i++) {
        if (requests[i] == head) {
            index = i;
            break;
        }
    }

    printf("\nSCAN Disk Scheduling Order:\n");
    printf("%d", head);

    if (direction == 1) {  // Move towards max track first
        for (int i = index + 1; i < numRequests; i++) {
            printf(" -> %d", requests[i]);
            totalMovement += abs(head - requests[i]);
            head = requests[i];
        }

        if (head != diskSize - 1) {  // Move to end if not already there
            printf(" -> %d", diskSize - 1);
            totalMovement += abs(head - (diskSize - 1));
            head = diskSize - 1;
        }

        for (int i = index - 1; i >= 0; i--) {
            printf(" -> %d", requests[i]);
            totalMovement += abs(head - requests[i]);
            head = requests[i];
        }

    } else {  // Move towards 0 first
        for (int i = index - 1; i >= 0; i--) {
            printf(" -> %d", requests[i]);
            totalMovement += abs(head - requests[i]);
            head = requests[i];
        }

        if (head != 0) {  // Move to start if not already there
            printf(" -> 0");
            totalMovement += head;
            head = 0;
        }

        for (int i = index + 1; i < numRequests; i++) {
            printf(" -> %d", requests[i]);
            totalMovement += abs(head - requests[i]);
            head = requests[i];
        }
    }

    printf("\n\nTotal head movement: %d\n", totalMovement);

    return 0;
}
