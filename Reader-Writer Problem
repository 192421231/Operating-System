#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, wrt;
int readcount = 0;

void *reader(void *arg) {
    int f = *((int *)arg);

    sem_wait(&mutex);
    readcount++;
    if (readcount == 1)
        sem_wait(&wrt);
    sem_post(&mutex);

    printf("Reader %d is reading\n", f);
    sleep(1);
    printf("Reader %d finished reading\n", f);

    sem_wait(&mutex);
    readcount--;
    if (readcount == 0)
        sem_post(&wrt);
    sem_post(&mutex);

    return NULL;
}

void *writer(void *arg) {
    int f = *((int *)arg);

    sem_wait(&wrt);

    printf("Writer %d is writing\n", f);
    sleep(1);
    printf("Writer %d finished writing\n", f);

    sem_post(&wrt);

    return NULL;
}

int main() {
    pthread_t r[5], w[5];
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    int a[5] = {1, 2, 3, 4, 5}; // Thread ID numbers

    for (int i = 0; i < 5; i++) {
        pthread_create(&r[i], NULL, reader, (void *)&a[i]);
        pthread_create(&w[i], NULL, writer, (void *)&a[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(r[i], NULL);
        pthread_join(w[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
