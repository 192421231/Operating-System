#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // Number of philosophers

sem_t forks[N];         // One semaphore per fork
sem_t mutex;            // For printing output without interleaving

void* philosopher(void* num) {
    int id = *(int*)num;

    while (1) {
        // Thinking
        sem_wait(&mutex);
        printf("Philosopher %d is thinking.\n", id);
        sem_post(&mutex);
        sleep(1);

        // Pick up left fork
        sem_wait(&forks[id]);
        // Pick up right fork
        sem_wait(&forks[(id + 1) % N]);

        // Eating
        sem_wait(&mutex);
        printf("Philosopher %d is eating.\n", id);
        sem_post(&mutex);
        sleep(2);

        // Put down right fork
        sem_post(&forks[(id + 1) % N]);
        // Put down left fork
        sem_post(&forks[id]);
    }
    return NULL;
}

int main() {
    pthread_t thread_id[N];
    int philosopher_ids[N];

    sem_init(&mutex, 0, 1);
    for (int i = 0; i < N; i++)
        sem_init(&forks[i], 0, 1);

    for (int i = 0; i < N; i++) {
        philosopher_ids[i] = i;
        pthread_create(&thread_id[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (int i = 0; i < N; i++)
        pthread_join(thread_id[i], NULL);

    return 0;
}
