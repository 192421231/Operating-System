#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>

#define FILENAME "io_demo.txt"

int main() {
    int fd;
    struct stat fileStat;
    DIR *dir;
    struct dirent *entry;

    // 1. Create and write to a file
    fd = open(FILENAME, O_CREAT | O_WRONLY, 0644);
    if (fd < 0) {
        perror("open");
        return 1;
    }
    const char *text = "This is a UNIX I/O system calls demo.\n";
    if (write(fd, text, strlen(text)) < 0) {
        perror("write");
        close(fd);
        return 1;
    }

    // 2. Seek to 10 bytes from the start
    off_t offset = lseek(fd, 10, SEEK_SET);
    if (offset == (off_t) -1) {
        perror("lseek");
        close(fd);
        return 1;
    }
    printf("Moved file offset to position: %ld\n", (long)offset);

    // 3. Get file descriptor flags using fcntl
    int flags = fcntl(fd, F_GETFL);
    if (flags < 0) {
        perror("fcntl");
        close(fd);
        return 1;
    }
    printf("File descriptor flags: 0x%x\n", flags);

    close(fd);

    // 4. Use stat to get file info
    if (stat(FILENAME, &fileStat) < 0) {
        perror("stat");
        return 1;
    }
    printf("\nFile Info for \"%s\":\n", FILENAME);
    printf("Size: %ld bytes\n", (long)fileStat.st_size);
    printf("Permissions: %o\n", fileStat.st_mode & 0777);
    printf("Last modified time: %ld\n", fileStat.st_mtime);

    // 5. Use opendir & readdir to list current directory
    printf("\nListing current directory contents:\n");
    dir = opendir(".");
    if (!dir) {
        perror("opendir");
        return 1;
    }
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }
    closedir(dir);

    // Clean up
    unlink(FILENAME);

    return 0;
}
