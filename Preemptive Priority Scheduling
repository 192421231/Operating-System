#include <stdio.h>

struct Process {
    int pid;       // Process ID
    int bt;        // Burst Time
    int at;        // Arrival Time
    int pri;       // Priority
    int rt;        // Remaining Time
    int ct;        // Completion Time
    int tat;       // Turnaround Time
    int wt;        // Waiting Time
    int done;      // Completion flag
};

int main() {
    int n, completed = 0, time = 0, min_pri;
    struct Process p[10];

    printf("Enter total number of processes: ");
    scanf("%d", &n);

    printf("Enter Arrival Time, Burst Time and Priority for each process:\n");
    for(int i = 0; i < n; i++) {
        printf("P[%d]:\n", i+1);
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Priority (lower number = higher priority): ");
        scanf("%d", &p[i].pri);

        p[i].pid = i+1;
        p[i].rt = p[i].bt;
        p[i].done = 0;
    }

    printf("\nGantt Chart:\n");

    while(completed != n) {
        int idx = -1;
        min_pri = 9999;

        // Find process with highest priority at current time
        for(int i = 0; i < n; i++) {
            if(p[i].at <= time && p[i].done == 0 && p[i].pri < min_pri && p[i].rt > 0) {
                min_pri = p[i].pri;
                idx = i;
            }
        }

        if(idx != -1) {
            printf("| P%d ", p[idx].pid);
            p[idx].rt--;

            if(p[idx].rt == 0) {
                p[idx].done = 1;
                completed++;
                p[idx].ct = time + 1;
                p[idx].tat = p[idx].ct - p[idx].at;
                p[idx].wt = p[idx].tat - p[idx].bt;
            }
        } else {
            printf("| Idle ");
        }
        time++;
    }

    printf("|\n");

    printf("\nProcess\tAT\tBT\tP\tCT\tTAT\tWT\n");
    float total_tat = 0, total_wt = 0;
    for(int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].pri, p[i].ct, p[i].tat, p[i].wt);
        total_tat += p[i].tat;
        total_wt += p[i].wt;
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_tat/n);
    printf("Average Waiting Time: %.2f\n", total_wt/n);

    return 0;
}
